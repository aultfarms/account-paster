{"version":3,"sources":["name-category-mappings.js","App.js","serviceWorker.js","index.js"],"names":["standardizeName","orig","a","replace","toUpperCase","console","log","standardizeNameKeys","obj","Object","keys","reduce","acc","k","nameCategoryMapping","splitMapping","col","val","style","minWidth","txToRow","r","i","backgroundColor","iserror","date","isValid","format","check","description","amount","name","category","note","standardizeTx","tx","line","moment","numeral","value","splitLine","descriptoin","insertSplits","numsplits","j","push","App","useState","parseState","setParseState","transactions","setTransactions","onDrop","useCallback","acceptedFiles","forEach","file","csvparse","header","complete","data","errors","cleaned","map","withSplits","useDropzone","getRootProps","getInputProps","body","border","display","alignItems","justifyContent","height","borderRadius","margin","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b616a10.chunk.js","sourcesContent":["// All names/keys get standardized this way:\nexport const standardizeName = orig => {\n  if (!orig) return '';\n  let a = orig;\n  a = a.replace(/[^a-zA-Z]/g,''); // remove puntuation and spaces\n  a = a.toUpperCase(); // case insensitive\n  a = a.replace(/(LLC|INC)/,''); // no LLC or INC\n  console.log(`Turned ${orig} into ${a}`);\n  return a;\n};\n\nconst standardizeNameKeys = obj => Object.keys(obj)\n  .reduce((acc,k) => {\n    acc[standardizeName(k)] = obj[k];\n    return acc;\n  }, {});\n   \n\nexport const nameCategoryMapping = standardizeNameKeys({\n  'ADM Logansport': 'sales-grain-corn',\n  'AGRICOR, INC.': 'feed-hominy',\n  'ARCHER DANIELS MIDLAND': 'feed-hulls',\n  'AT&T - AultFarms': 'utilities-cellphones',\n  'AT&T Mobility - DAD': 'utilities-cellphones',\n  'AT&T Mobility': 'utilities-cellphones',\n  'Ag Source, Inc.': 'repairs-grainhandling',\n  'Agco Finance - Agco Plus': 'repairs-telehandler',\n  'AGCO FINANCE LLC': 'repairs-telehandler',\n  'Agronomic Solutions': 'services-regulatory',\n  'ALRO STEEL': 'supplies-steel',\n  'BBH Trucking': 'feed-trucking-brad',\n  'BIG R STORES': 'supplies-general',\n  'STOCK+FIELD-CORPORATE': 'supplies-general',\n  'BLB Trucking': 'repairs-truck-general',\n  'Bane Welker Equip - PAY PLYMOUTH EAUL01': 'repairs-tractors',\n  'BANE-WELKER-PLYMOUTH': 'repairs-tractors',\n  'Bane Welker Equip - PAY WINAMAC DAUL01': 'repairs-tractors',\n  'BANE-WELKER-WINAMAC': 'repairs-tractors',\n  'Bob Gottschalk': 'SPLIT',\n  'Bonnie Montgomery': 'cashrent-fall',\n  'Bush Veterinary Services, P.C.': 'medicine',\n  'Calf Care': 'medicine',\n  'Cargill Incorporated': 'feed-gluten',\n  'C & J SCOTT FARMS INC': 'supplies-twine',\n  'Ceres Solutions': 'SPLIT',\n  'Cole Hardwood': 'bedding-sawdust',\n  'Cole Warren Farms': 'feed-syrup',\n  'Cornerstone Comfort Solutions': 'repairs-hvac',\n  'DRAGO INDIANA': 'repairs-cornhead',\n  'DirecTV': 'utilities-tv',\n  'AT&T': 'utilities-tv',\n  'Du-Mar Welding LLC': 'supplies-general',\n  'Enyart\\'s True Value': 'supplies-general',\n  'Fansler Lumber Co. Inc.': 'supplies-general',\n  'Farm Credit Mid America': 'SPLIT',\n  'First Bank of Berne': 'SPLIT',\n  'Ferguson Farms, Inc.': 'repairs-truck-trailer',\n  'Fulton County Treasurer': 'taxes-property',\n  'GUTWEIN LLP': 'services-legal',\n  'Greenmark Equipment': 'repairs-tractors',\n  'Gutwein Dairy Consulting, Inc.': 'feed-mineral',\n  'H&H Diesel Inc.': 'repairs-truck-general',\n  'HOLLOWAY\\'S ELECTRIC MOTOR SERVICE': 'repairs-general',\n  'Homer Miller': 'bedding-sawdust',\n  'INGREDION': 'feed-gluten',\n  'Indiana Department of Workforce Development': 'taxes-state-unemployment',\n  'Indiana State Chemist': 'miscellaneous-licensefees',\n  'Irving Materials, Inc.': 'bedding-chips',\n  'JOHNNY ON THE SPOT': 'utilities-sanitation',\n  'Jeri Stinson': 'services-cleaning',\n  'Joe Miller': 'supplies-twine',\n  'Kline\\'s CPA Group, P.C.': 'services-accounting',\n  'Lawson Products, Inc.': 'supplies-general',\n  'LDC Claypool Holdings LLC': 'feed-hulls',\n  'Liberty Mutual Acct 401580870': 'insurance-auto',\n  'Liberty Mutual Acct 6680': 'insurance-general',\n  'MOON FENCING': 'repairs-fence',\n  'McGREW\\'S WELL DRILLING INC': 'repairs-well',\n  'NAPA AUTO PARTS': 'supplies-general',\n  'NAPA ROCHESTER': 'supplies-general',\n  'NAU Country Insurance': 'insurance-crop',\n  'NIPSCO': 'utilities-gas',\n  'New Holland Rochester Inc.': 'repairs-tractors',\n  'OR Processing': 'feed-candy',\n  'OYLER REPAIR SHOP': 'repairs-general',\n  'Organix Recycling': 'feed-fruit',\n  'POWER BRAKE AND SPRING': 'supplies-general',\n  'POWER BRAKE AND SPRING SERVICE': 'supplies-general',\n  'Pallet Pro LLC': 'bedding-sawdust',\n  'Parker & Sons Eqpt., Inc.': 'repairs-jcb',\n  'Premier Pallet LLC': 'bedding-sawdust',\n  'Protective Insurance Company': 'insurance-workmanscomp',\n  'Prudential': 'insurance-life-carl',\n  'Rochester LP Gas': 'utilities-gas',\n  'SMITH FARM STORE': 'supplies-general',\n  'SMITH FARM STORE-RENSSELAER': 'supplies-general',\n  'Safeco Insurance': 'insurance-auto',\n  'Sam\\'s Club': 'miscellaneous-subscriptions',\n  'Service Sanitation': 'utilities-sanitation',\n  'Silver Star Companies, LLC': 'crop-seed-wheat',\n  'The Andersons': 'SPLIT',\n  'THE ANDERSONS INC-N MANCHESTER': 'SPLIT',\n  'THE TIRE STORE': 'repairs-pickups',\n  'Transfer from Farm Credit': 'transfer-from:FC.RLOC,to:FF.checking',\n  'Tri-State Calf Products': 'cattle-purchase-cattle',\n  'ULERICK HEATING & COOLING': 'repairs-hvac',\n  'VPSI DUBOIS DISTRIBUTORS': 'medicine',\n  'VETERINARY AND POULTRY SUPPLY, I': 'medicine',\n  'Valley Sanitation': 'utilities-trash',\n  'Voya Finanacial': 'insurance-life-rita',\n  'Wiers International Trucks SOUTH BEND': 'repairs-truck-general',\n  'WIERS INTERNATIONAL TRUCKS': 'repairs-truck-general',\n  'Wildman Uniform and Linen': 'employee-clothes',\n});\n\n// If you want more/less than 2 splits inserted for a payee, put them here:\nexport const splitMapping = standardizeNameKeys({\n  'Ceres': 3,\n});\n","import React, { useCallback, useState } from 'react';\nimport { nameCategoryMapping, splitMapping, standardizeName } from './name-category-mappings';\nimport { useDropzone } from 'react-dropzone';\nimport { parse as csvparse } from 'papaparse';\nimport moment from 'moment';\nimport numeral from 'numeral';\nimport './App.css';\n\nconst col = val => <td style={{minWidth:'25px'}}>{val ? val : ''}</td>;\n\nconst txToRow = (r,i) => \n  <tr key={'row'+i} style={{backgroundColor: r.iserror ? 'red' : 'white' }}>\n    {col(r.date && r.date.isValid() ? r.date.format('YYYY-MM-DD') : '') /* writtenDate */ }\n    {col() /* postDate */ }\n    {col(r.check ? r.check : '') /* checkNum */ }\n    {col(r.description) /* description */ }\n    {col(r.amount < 0 ? r.amount : '') /* debit */ }\n    {col(r.amount >= 0 ? r.amount : '') /* credit  */ }\n    {col() /* splitAmount */ }\n    {col() /* balance */ }\n    {col(r.name) /* who */ }\n    {col(r.category ? r.category : '') /* category */ }\n    {col(r.note ? r.note : '') /* note */ }\n  </tr>\n;\n\nconst standardizeTx = (tx,line) => {\n  line = line + 2; // header row, and 1-index instead of 0-index\n  const date = moment(tx['Payment Date'], 'MM/DD/YYYY');\n  const name = tx['Payee'];\n  const amount = numeral(tx['Dollar Amount']).value();\n  const category = nameCategoryMapping[standardizeName(name)] || false;\n  const description = ''; // in the future, can put memo line here\n  let iserror = false;\n  let note = '';\n\n\n  if (!date || !date.isValid()) {\n    iserror = true;\n    note += `The date ${tx['Payment Date']} is invalid.  `;\n  }\n  if (!category) {\n    iserror = true;\n    note += `The name ${name} is not found in the known list of category mappings`;\n  }\n  if (!amount) {\n    iserror = true;\n    note += `The amount ${tx['Dollar Amount']} is invalid`;\n  }\n  return {\n    iserror, note, date, amount, name, category, description\n  };\n}\n\nconst splitLine = (tx) => ({\n  iserror: tx.iserror,\n  note: tx.iserror ? 'Split of line w/ error' : '',\n  date: '',\n  amount: '',\n  name: 'SPLIT',\n  category: '',\n  descriptoin: 'SPLIT',\n})\nconst insertSplits = (acc, tx, i) => {\n  if (tx.category && tx.category === 'SPLIT') {\n    const numsplits = splitMapping[tx.name] || 2; // default to 2 split lines\n    for(let j=0; j<numsplits; j++) {\n      acc.push(splitLine(tx));\n    }\n  }\n  return acc;\n};\n\nexport const App = () => {\n  \n  const [parseState, setParseState] = useState('START');\n  const [transactions, setTransactions] = useState([]);\n\n  const onDrop = useCallback((acceptedFiles) => {\n    setParseState('PARSING');\n\n    acceptedFiles.forEach((file) => {\n      csvparse(file, {\n        header: true,\n        complete: ({ data,errors }) => {\n          const cleaned = data.map(standardizeTx);\n          const withSplits = cleaned.reduce(insertSplits, []);\n          console.log('cleaned = ', cleaned);\n          console.log('withSplits = ', withSplits);\n          setTransactions(cleaned);\n          console.log('parsed transactions = ', transactions);\n          setParseState('PARSED');\n        },\n      });\n    })\n  }, []);\n  const {getRootProps, getInputProps} = useDropzone({onDrop});\n\n\n  let body = '';\n  switch(parseState) {\n\n    case \"PARSING\": body = \n      <div>Parsing...</div>\n    break;\n\n    case \"PARSED\": console.log('IN PARSED, tx = ', transactions); body = \n      <div>\n        Paste this into google sheets:\n        <table style={ { border: '1px solid grey' } }>\n          <tbody>\n            { transactions.map(txToRow) }\n          </tbody>\n        </table>\n      </div>;\n    break;\n\n    // START:\n    default: body = \n      <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center', height: '80vh', border: '3px dashed grey', borderRadius: '5px', margin: '20px'}} {...getRootProps()}>\n        <input {...getInputProps()} />\n        <p>v2.0: Drop FBB Excel File Here</p>\n      </div>;\n  }\n\n  return <div className=\"App\">\n    {body}\n  </div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}