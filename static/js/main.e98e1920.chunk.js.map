{"version":3,"sources":["parseLib.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","items","_","require","processItem","arr","console","log","check_vs_electronic_line","map","a","trim","match","isElectronic","amtline","each","v","i","dateline","confline","checkline","matches","amt","check","ret","name","replace","date","conf","processStr","str","lines","cur_item","length","l","push","processLines","split","readSync","join","row","j","exports","__webpack_require__","p","nameCategoryMapping","ADM Logansport","AGRICOR, INC.","ARCHER DANIELS MIDLAND","AT&T - AultFarms","AT&T Mobility - DAD","Ag Source, Inc.","Agco Finance - Agco Plus","Agronomic Solutions","BBH Trucking","BIG R STORES","BLB Trucking","Bane Welker Equip - PAY PLYMOUTH EAUL01","Bane Welker Equip - PAY WINAMAC DAUL01","Bob Gottschalk","Bonnie Montgomery","Bush Veterinary Services, P.C.","Calf Care","Cargill Incorporated","Ceres Solutions","Cole Hardwood","Cole Warren Farms","Cornerstone Comfort Solutions","DRAGO INDIANA","DirecTV","Du-Mar Welding LLC","Enyart's True Value","Fansler Lumber Co. Inc.","Farm Credit Mid America","Ferguson Farms, Inc.","Fulton County Treasurer","GUTWEIN LLP","Greenmark Equipment","Gutwein Dairy Consulting, Inc.","H&H Diesel Inc.","HOLLOWAY'S ELECTRIC MOTOR SERVICE","Homer Miller","INGREDION","Indiana Department of Workforce Development","Indiana State Chemist","Irving Materials, Inc.","JOHNNY ON THE SPOT","Jeri Stinson","Joe Miller","Kline's CPA Group, P.C.","Lawson Products, Inc.","Liberty Mutual Acct 401580870","Liberty Mutual Acct 6680","NAPA AUTO PARTS","NAU Country Insurance","NIPSCO","New Holland Rochester Inc.","OR Processing","OYLER REPAIR SHOP","Organix Recycling","POWER BRAKE AND SPRING","Pallet Pro LLC","Parker & Sons Eqpt., Inc.","Premier Pallet LLC","Protective Insurance Company","Prudential","Rochester LP Gas","SMITH FARM STORE","Safeco Insurance","Sam's Club","Service Sanitation","Silver Star Companies, LLC","The Andersons","Transfer from Farm Credit","Tri-State Calf Products","ULERICK HEATING & COOLING","VPSI DUBOIS DISTRIBUTORS","Valley Sanitation","Voya Finanacial","Wiers International Trucks SOUTH BEND","Wildman Uniform and Linen","col","val","react_default","createElement","style","minWidth","splitRowFarmCredit","key","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","do_parse","className","border","parseLib","pasted_data","reduce","acc","r","objToRow","rows","cols","onChange","evt","setState","target","value","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e98e1920.chunk.js","sourcesContent":["const _ = require('lodash');\nconst commandline = (require.main === module);\n\n//--------------------------------------------------\n// Helpers:\nvar lines = [];\nfunction processItem(arr) {\n  //-------------------------------------------\n  // NOTE: this isn't fixed yet for new payees: the old way had an extra line for \"Last Paid\"\n  //-------------------------------------------\n  // line[0] is my name for them in bill pay before the *\n  //     [1] is actual payee\n  //     [2] is empty -- used to be: acct. #\n  //     [3] is 'Last paid' -- used to be: 'Check' or 'Electronic'\n  //     [4] is empty\n  //     [5] is 'Check or Electronic' -- used to be: EITHER 'Last paid: ' or 'Bu Smart'\n  //     [6] is empty\n  //     [7] is 'Pay fromBu Smart *2769  $5429.60 Amount\n  //     < this line used to be empty, now it is just payment date shifted up [8] is empty>\n  //     [8] is payment date\n  //     [9] is deliver by date\n  //    [10] is 'Conf #: 1076'\n  //    [11] is 'Check number: 2186' - Electronic ones do not have a check number\n  //    [12] is 'Delivery: Standard' - used to split, not included in array\n  //    <end>\n  // Used to be:\n  //     [BuSmart + 1] = ***2769\n  //     [BuSmart + 2] = $ Amount\n  //     [BuSmart + 3] = Date Written\n  //     [BuSmart + 4] = Date to send\n  //     [BuSmart + 5] = 'Conf #: '\n  //     <end>\nconsole.log('processItem: arr = ', arr);\n  arr = _.map(arr, function(a) { return a.trim() });\n  const hasLastPaid = !!arr[3].match(/^Last paid: /);\n  let check_vs_electronic_line = 5;\n  if (!hasLastPaid) check_vs_electronic_line--; // assume one less line\n  const isElectronic = !!arr[check_vs_electronic_line].match(/Electronic/);\n\n  const nameline = 0;\n  let amtline = 0;\n  _.each(arr, (v,i) => {if (v.match(/Amount/)) amtline=i});  \n  const dateline = amtline+2; // They seem to be removing or adding a blank line here from time to time\n  const confline = dateline+2;\n  const checkline = confline+1;\n\n  let matches = arr[amtline].match(/(\\$[0-9]+\\.[0-9]{2}) +Amount$/);\n  const amt = matches[1];\n  let check = ''; // Electronic ones do not have a check number\n  if (!isElectronic) {\n    matches = arr[checkline].match(/^Check number: +([0-9]+)$/);\n    //console.log('Check, item = ', arr);\n    //console.log('hasLastPaid = ', hasLastPaid);\n    //console.log('check_vs_electronic_line = ',arr[check_vs_electronic_line]);\n    //console.log('amtline(',amtline,') = ',arr[amtline]);\n    //console.log('dateline(',dateline,') = ',arr[dateline]);\n    //console.log('confline(',confline,') = ',arr[confline]);\n    //console.log('checkline(',checkline,') = ',arr[checkline], ', matches = ', matches);\n    check = matches[1];\n  }\n\n  const ret = {\n    name: arr[nameline].replace(/ *\\*.*$/,''), // get rid of the acct number on the end\n     amt,\n    date: arr[dateline],\n    conf: arr[confline],\n   check,\n  };\n\n  // Validate:\n  if (!ret.amt.match(/^\\$[0-9]+\\.[0-9]{2}$/)) {\n    console.log('ERROR: amt should be $XXXX.XX or some such thing instead of ' + ret.amt);\n    return null;\n  }\n  if (!ret.date.match(/^[0-9]{1,2}\\/[0-9]{1,2}\\/[0-9]{4}$/)) {\n    console.log('ERROR: date should be XX/XX/XXXX or some such thing instead of ', ret.date);\n    return null;\n  }\n  if (!ret.conf.match(/^Conf #: [0-9]+$/)) {\n    console.log('ERROR: conf # should be Conf #: XXX or some such thing instead of ', ret.conf);\n    return null;\n  }\n  if (!isElectronic && !ret.check.match(/^[0-9]+$/)) {\n    console.log('ERROR: check should be Check number: XXXX or some such thing instead of ', ret.check);\n    return null;\n  }\n\n  return ret;\n} \n\n\nfunction processLines(lines) {\nconsole.log('processLines: lines = ', lines);\n  // Split things by 'Delivery: Standard'\n  var items = [];\n  var cur_item = [];\n  for(var i=0; i<lines.length; i++) {\n    var l = lines[i];\n    if (l.match(/Delivery: Standard/)) {\n      items.push(processItem(cur_item));\n      cur_item = [];\n      continue;\n    }\n    cur_item.push(l);\n  }\n  return items;\n}\n\nfunction processStr(str) {\nconsole.log('processStr: str = ', str);\n  return processLines(_.split(str, '\\n'));\n}\n\nfunction generateTabSeparated(items) {\n  return _.map(items, function(i) {\n    var row = [];\n    for(var j=0; j<9; j++) { row.push(''); } // always make 9 columns\n    row[0] = i.date;\n    row[2] = i.check;\n    row[3] = i.conf;\n    row[4] = i.amt;\n    row[8] = i.name;\n//    return _.join(row,'\\t');\n    return _.join(row,';');\n  });\n}\n\nif (commandline) {\n  const clipboardy = require('clipboardy');\n  const str = clipboardy.readSync();\n  console.log('--------------------------------------------------------------');\n  console.log('Lines to paste into Excel: ');\n  console.log(_.join(generateTabSeparated(processStr(str)),'\\n'));\n\n} else {\n  // running as a library, so just export a function:\n  module.exports = processStr;\n}\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport parseLib from './parseLib';\n\nconst nameCategoryMapping = {\n  'ADM Logansport': 'sales-grain-corn',\n  'AGRICOR, INC.': 'feed-hominy',\n  'ARCHER DANIELS MIDLAND': 'feed-hulls',\n  'AT&T - AultFarms': 'employee-phone',\n  'AT&T Mobility - DAD': 'employee-phone',\n  'Ag Source, Inc.': 'repairs-grainhandling',\n  'Agco Finance - Agco Plus': 'repairs-telehandler',\n  'Agronomic Solutions': 'services-regulatory',\n  'BBH Trucking': 'feed-trucking-brad',\n  'BIG R STORES': 'supplies-general',\n  'BLB Trucking': 'repairs-truck-general',\n  'Bane Welker Equip - PAY PLYMOUTH EAUL01': 'repairs-tractors',\n  'Bane Welker Equip - PAY WINAMAC DAUL01': 'repairs-tractors',\n  'Bob Gottschalk': 'SPLIT',\n  'Bonnie Montgomery': 'cashrent-fall',\n  'Bush Veterinary Services, P.C.': 'medicine',\n  'Calf Care': 'medicine',\n  'Cargill Incorporated': 'feed-gluten',\n  'Ceres Solutions': 'SPLIT',\n  'Cole Hardwood': 'bedding-sawdust',\n  'Cole Warren Farms': 'feed-syrup',\n  'Cornerstone Comfort Solutions': 'repairs-hvac',\n  'DRAGO INDIANA': 'repairs-cornhead',\n  'DirecTV': 'utilities-tv',\n  'Du-Mar Welding LLC': 'supplies-general',\n  'Enyart\\'s True Value': 'supplies-general',\n  'Fansler Lumber Co. Inc.': 'supplies-general',\n  'Farm Credit Mid America': 'SPLIT',\n  'Ferguson Farms, Inc.': 'repairs-truck-trailer',\n  'Fulton County Treasurer': 'taxes-property',\n  'GUTWEIN LLP': 'services-legal',\n  'Greenmark Equipment': 'repairs-tractors',\n  'Gutwein Dairy Consulting, Inc.': 'feed-mineral',\n  'H&H Diesel Inc.': 'repairs-truck-general',\n  'HOLLOWAY\\'S ELECTRIC MOTOR SERVICE': 'repairs-general',\n  'Homer Miller': 'bedding-sawdust',\n  'INGREDION': 'feed-gluten',\n  'Indiana Department of Workforce Development': 'taxes-state-unemployment',\n  'Indiana State Chemist': 'miscellaneous-licensefees',\n  'Irving Materials, Inc.': 'bedding-chips',\n  'JOHNNY ON THE SPOT': 'utilities-sanitation',\n  'Jeri Stinson': 'services-cleaning',\n  'Joe Miller': 'supplies-twine',\n  'Kline\\'s CPA Group, P.C.': 'services-accounting',\n  'Lawson Products, Inc.': 'supplies-general',\n  'Liberty Mutual Acct 401580870': 'insurance-auto',\n  'Liberty Mutual Acct 6680': 'insurance-general',\n  'NAPA AUTO PARTS': 'supplies-general',\n  'NAU Country Insurance': 'insurance-crop',\n  'NIPSCO': 'utilities-gas',\n  'New Holland Rochester Inc.': 'repairs-tractors',\n  'OR Processing': 'feed-candy',\n  'OYLER REPAIR SHOP': 'repairs-general',\n  'Organix Recycling': 'feed-fruit',\n  'POWER BRAKE AND SPRING': 'supplies-general',\n  'Pallet Pro LLC': 'bedding-sawdust',\n  'Parker & Sons Eqpt., Inc.': 'repairs-jcb',\n  'Premier Pallet LLC': 'bedding-sawdust',\n  'Protective Insurance Company': 'insurance-workmanscomp',\n  'Prudential': 'insurance-life-carl',\n  'Rochester LP Gas': 'utilities-gas',\n  'SMITH FARM STORE': 'supplies-general',\n  'Safeco Insurance': 'insurance-auto',\n  'Sam\\'s Club': 'miscellaneous-subscriptions',\n  'Service Sanitation': 'utilities-sanitation',\n  'Silver Star Companies, LLC': 'crop-seed-wheat',\n  'The Andersons': 'SPLIT',\n  'Transfer from Farm Credit': 'transfer-from:FC.RLOC,to:FF.checking',\n  'Tri-State Calf Products': 'cattle-purchase-cattle',\n  'ULERICK HEATING & COOLING': 'repairs-hvac',\n  'VPSI DUBOIS DISTRIBUTORS': 'medicine',\n  'Valley Sanitation': 'utilities-trash',\n  'Voya Finanacial': 'insurance-life-rita',\n  'Wiers International Trucks SOUTH BEND': 'repairs-truck-general',\n  'Wildman Uniform and Linen': 'employee-clothes',\n};\n\nconst col = val => <td style={{minWidth:'25px'}}>{val ? val : ''}</td>;\n\nconst splitRowFarmCredit = (key) => \n  <tr key={key}>\n    {col()}\n    {col()}\n    {col()}\n    {col('SPLIT')}\n    {col()}\n    {col()}\n    {col()}\n    {col()}\n    {col('SPLIT')}\n    {col()}\n  </tr>;\n\nconst objToRow = (r,i) => \n  <tr key={'row'+i}>\n    {col(r.date)}\n    {col()}\n    {col(r.check)}\n    {col(r.conf)}\n    {col(r.amt)}\n    {col()}\n    {col()}\n    {col()}\n    {col(r.name)}\n    {col(nameCategoryMapping[r.name] ? nameCategoryMapping[r.name] : '')}\n  </tr>\n;\n\nclass App extends Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (this.state.do_parse\n\n    ? <div className=\"App\">\n        Paste this into google sheets:\n        <table style={ { border: '1px solid grey' } }>\n          <tbody>\n            { \n              parseLib(this.state.pasted_data).reduce((acc,r,i) => {\n                acc.push(objToRow(r,i));\n                if (nameCategoryMapping[r.name] === 'SPLIT') {\n                  if (r.name === 'Farm Credit Mid America') {\n                    // 2 empty rows\n                    acc.push(splitRowFarmCredit('row'+i+'_1'));\n                    acc.push(splitRowFarmCredit('row'+i+'_2'));\n                  }\n                }\n                return acc;\n              }, [])\n            }\n          </tbody>\n        </table>\n      </div>\n\n    : <div className=\"App\">\n        Paste stuff from bank here:\n        <br/>\n        <textarea rows=\"40\" cols=\"120\" onChange={ evt => this.setState({ pasted_data: evt.target.value }) }>{this.state.pasted_data}</textarea>\n        <br/>\n        <button onClick={() => this.setState({ do_parse: true }) } >Convert</button>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}