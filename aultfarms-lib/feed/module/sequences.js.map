{"version":3,"sources":["../../src/feed/module/sequences.js"],"names":["processCards","state","cards","get","records","map","c","name","error","card","matches","match","date","trim","rest","sourceAndNumber","replace","source","toUpperCase","loadNumber","weight","destination","driver","note","invoiced","find","labels","l","color","paidFor","truckingPaid","set","sortBy","d","ignoreBefore","recentDeliveries","filter","isBefore","notInvoiced","groupBy","n","notPaidFor","p","truckingNotPaid","t","fetch","boardName","listName","key"],"mappings":"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","file":"sequences.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport { state } from 'cerebral/tags';\nimport { set } from 'cerebral/operators';\nimport { sequence } from 'cerebral';\n\nimport { loadList } from '../../trello/module/sequences';\n\n\n// Example cards:\n// 2017-01-26: Df pellets 1-26-17 209366.  48.620 lbs - Home - Brock\n// 2017-01-24: North Central Pallets46470.  8 lbs - Home - Andrew.  Note: some info\nfunction processCards({state}) {\n  // First parse the cards, then later determine invoiced list, non-invoiced list, etc.\n  const cards = state.get('trello.lists.feedDeliveries.cards');\n  const records = _.map(cards, c => {\n    if (!c.name) { return { error: 'card name does not exist', card: c } }\n    // Date on front:\n    let matches = c.name.match(/([0-9]{4}-[0-9]{2}-[0-9]{2}): *(.*)$/);\n    const date = moment(matches[1].trim(), 'YYYY-MM-DD');\n    let rest = matches[2];\n    // Next is source+number (up to a period)\n    matches = rest.match(/^([^.]*). *(.*)$/);\n    rest = matches[2];\n    const sourceAndNumber = matches[1].trim().replace('/ *pellets */g','');\n\n    matches = sourceAndNumber.match(/^([^0-9]+)?(.*)$/);\n    const source = (matches[1] ? matches[1].trim() : 'NONE').toUpperCase();\n    const loadNumber = matches[2] ? matches[2].trim() : '';\n\n    // Then comes pounds w/ period instead of comma sometimes\n    matches = rest.match(/(([0-9]+[,.])?[0-9]*) +lbs +- +(.*)$/);\n    const weight = +(matches[1].replace(/[,.]/g,'').trim()); // convert to number\n    rest = matches[3];\n    // Then comes destination\n    matches = rest.match(/([^-]+) *- *(.*)$/);\n    const destination = matches[1].toUpperCase().trim();\n    rest = matches[2];\n    // Now driver\n    matches = rest.match(/([^.]*)(. *(.*))?$/);\n    const driver = matches[1].trim();\n    rest = matches[3] || '';\n    // Optional note\n    matches = rest.match(/Note: *(.*)$/);\n    const note = (matches && matches[1].trim()) || '';\n\n    // Set true/false properties based on labels:\n    const     invoiced = !!(_.find(c.labels, l => l.color === 'orange'));\n    const      paidFor = !!(_.find(c.labels, l => l.color === 'green'));\n    const truckingPaid = !!(_.find(c.labels, l => l.color === 'blue'));\n\n    return { date, source, loadNumber, weight, destination, driver, note, invoiced, paidFor, truckingPaid, card: c };\n  });\n  state.set('feed.records', _.sortBy(records, d => d.date));\n\n  //---------------------------------------------------------\n  // Before grouping/filtering, eliminate cards older than we care about:\n  const ignoreBefore = moment(state.get('feed.ignoreBefore'), 'YYYY-MM-DD');\n  const recentDeliveries = _.filter(records, d => ignoreBefore.isBefore(d.date));\n\n  //----------------------------------------------------------\n  // Find loads not billed, group by destination\n  let notInvoiced = _.filter(recentDeliveries, d => !(d.invoiced));\n  notInvoiced = _.filter(notInvoiced, d => d.destination.toUpperCase() !== 'HOME');\n  state.set('feed.notInvoiced', _.groupBy(notInvoiced, n => n.destination));\n\n  //---------------------------------------------------------\n  // Find loads not paid for by us, group by source:\n  let notPaidFor = _.filter(recentDeliveries, d => !(d.paidFor));\n  state.set('feed.notPaidFor', _.groupBy(notPaidFor, p => p.source));\n\n  //----------------------------------------------------------------------------------\n  // Find loads that Brad hauled which we have not been billed for, group by source:\n  let truckingNotPaid = _.filter(recentDeliveries, d => d.driver.toUpperCase() === 'BRAD');\n  truckingNotPaid = _.filter(truckingNotPaid, d => !(d.truckingPaid));\n  state.set('feed.truckingNotPaid', _.groupBy(truckingNotPaid, t => t.source));\n}\n\n\nexport const fetch = sequence('feed.fetch', [\n  () => ({ boardName: 'Feed', listName: 'Feed Delivered', key: 'feedDeliveries' }),\n  loadList,\n  processCards,\n  set(state`feed.ready`, true),\n]);\n\n\n"]}