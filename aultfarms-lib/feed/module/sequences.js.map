{"version":3,"sources":["../../src/feed/module/sequences.js"],"names":["processOneCard","c","ignoreBefore","name","matches","match","date","trim","isBefore","rest","sourceAndNumber","replace","source","toUpperCase","loadNumber","weight","destination","driver","note","invoiced","_","find","labels","l","color","paidFor","truckingPaid","card","id","processCards","store","get","cards","state","reduce","acc","key","r","records","push","err","errors","error","toString","set","keyBy","processGroups","notInvoiced","filter","d","groupBy","n","notPaidFor","p","truckingNotPaid","t","fetch","boardName","listName","loadList","reprocessOneCard","props","markAsInvoiced","orangeLabel","idLabel","addLabelToCard"],"mappings":"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","file":"sequences.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport { set } from 'cerebral/factories';\nimport { state, sequence } from 'cerebral';\n\nimport { loadList, addLabelToCard } from '../../trello/module/sequences';\n\n\n// Example cards:\n// 2017-01-26: Df pellets 1-26-17 209366.  48.620 lbs - Home - Brock\n// 2017-01-24: North Central Pallets46470.  8 lbs - Home - Andrew.  Note: some info\n\nfunction processOneCard(c, { ignoreBefore }) {\n  if (!c.name) throw 'Card.name does not exist'\n  // Date on front:\n  let matches = c.name.match(/([0-9]{4}-[0-9]{2}-[0-9]{2}): *(.*)$/);\n  if (!matches || !matches[1]) throw 'Could not match date';\n  const date = moment(matches[1].trim(), 'YYYY-MM-DD');\n  if (date.isBefore(ignoreBefore)) return null; // ignore it\n  \n  let rest = matches[2];\n  if (!rest) throw 'No string after date';\n  // Next is source+number (up to a period)\n  matches = rest.match(/^([^.]*). *(.*)$/);\n  rest = matches[2];\n  if (!rest) throw 'No string after source+number';\n  if (!matches || !matches[1]) throw 'Could not match source+number';\n  const sourceAndNumber = matches[1].trim().replace('/ *pellets */g','');\n\n  matches = sourceAndNumber.match(/^([^0-9]+)?(.*)$/);\n  if (!matches) throw 'Could not match source name+number';\n  const source = (matches[1] ? matches[1].trim() : 'NONE').toUpperCase();\n  const loadNumber = matches[2] ? matches[2].trim() : '';\n\n  // Then comes pounds w/ period instead of comma sometimes\n  matches = rest.match(/(([0-9]+[,.])?[0-9]*) +lbs +- +(.*)$/);\n  if (!matches || !matches[1]) throw 'Could not match weight';\n  const weight = +(matches[1].replace(/[,.]/g,'').trim()); // convert to number\n  rest = matches[3];\n  if (!rest) throw 'No string after weight';\n\n  // Then comes destination\n  matches = rest.match(/([^-]+) *- *(.*)$/);\n  if (!matches || !matches[1]) throw 'Could not match destination';\n  const destination = matches[1].toUpperCase().trim();\n  rest = matches[2];\n  if (!rest) throw 'No string after destination';\n  // Now driver\n  matches = rest.match(/([^.]*)(. *(.*))?$/);\n  if (!matches || !matches[1]) throw 'Could not match driver';\n  const driver = matches[1].trim();\n  rest = matches[3] || '';\n  if (typeof rest !== 'string') throw 'No string after driver';\n\n  // Optional note\n  matches = rest.match(/Note: *(.*)$/);\n  const note = (matches && matches[1].trim()) || '';\n\n  // Set true/false properties based on labels:\n  const     invoiced = !!(_.find(c.labels, l => l.color === 'orange'));\n  const      paidFor = !!(_.find(c.labels, l => l.color === 'green'));\n  const truckingPaid = !!(_.find(c.labels, l => l.color === 'blue'));\n\n  return { \n    date, source, loadNumber, weight, destination, driver, \n    note, invoiced, paidFor, truckingPaid, card: c, id: c.id,\n  };\n}\n\nfunction processCards({store,get}) {\n  // First parse the cards, then later determine invoiced list, non-invoiced list, etc.\n  const cards = get(state`trello.lists.feedDeliveries.cards`);\n  const ignoreBefore = moment(get(state`feed.ignoreBefore`), 'YYYY-MM-DD');\n\n  const {records,errors} = _.reduce(cards, (acc,c,key) => {\n    try {\n      const r = processOneCard(c, { ignoreBefore });\n      if (r) acc.records.push(r);\n    } catch (err) {\n      acc.errors.push({ error: err.toString(), card: c });\n    } finally {\n      return acc;\n    }\n  }, { errors: [], records: [] });\n  store.set(state`feed.records`, _.keyBy(records, r => r.id));\n  store.set(state`feed.errors`, errors);\n\n}\n\nfunction processGroups({store,get}) {\n  const records = get(state`feed.records`);\n  //----------------------------------------------------------\n  // Find loads not billed, group by destination\n  let notInvoiced = _.reduce(records, (acc,r) => {\n    if (!r.invoiced) acc.push(r);\n    return acc;\n  }, []);\n  notInvoiced = _.filter(notInvoiced, d => d.destination.toUpperCase() !== 'HOME');\n  store.set(state`feed.notInvoiced`, _.groupBy(notInvoiced, n => n.destination));\n\n  //---------------------------------------------------------\n  // Find loads not paid for by us, group by source:\n  let notPaidFor = _.reduce(records, (acc,r) => {\n    if (!r.paidFor) acc.push(r);\n    return acc;\n  },[]);\n  store.set(state`feed.notPaidFor`, _.groupBy(notPaidFor, p => p.source));\n\n  //----------------------------------------------------------------------------------\n  // Find loads that Brad hauled which we have not been billed for, group by source:\n  let truckingNotPaid = _.reduce(records, (acc,r) => {\n    if (r.driver.toUpperCase() === 'BRAD'\n        && !r.truckingPaid) acc.push(r);\n    return acc;\n  },[]);\n  store.set(state`feed.truckingNotPaid`, _.groupBy(truckingNotPaid, t => t.source));\n\n}\n\nexport const fetch = sequence('feed.fetch', [\n  () => ({ boardName: 'Feed', listName: 'Feed Delivered', key: 'feedDeliveries' }),\n  loadList,\n  processCards,\n  processGroups,\n  set(state`feed.ready`, true),\n]);\n\nexport const reprocessOneCard = sequence('feed.reprocessOneCard', [\n  ({store,get,props}) => {\n    const ignoreBefore = moment(get(state`feed.ignoreBefore`), 'YYYY-MM-DD');\n    try {\n      store.set(state`feed.records.${props.card.id}`, processOneCard(props.card, {ignoreBefore}));\n    } catch (err) {\n      store.errors.push({ error: err.toString(), card: props.card });\n    }\n  },\n]);\n\n// Expects props.id, will mark one record as invoiced in trello\nexport const markAsInvoiced = sequence('feed.markAsInvoiced', [\n  // record id is same as cardid, so we can just use it\n  ({get}) => {\n    // Figure out id of \"orange\" color label\n    const labels = get(state`trello.lists.feedDeliveries.labels`);\n    const orangeLabel = _.find(labels, l => l.color === 'orange');\n    return { idLabel: orangeLabel.id };\n  },\n  addLabelToCard,\n  reprocessOneCard,\n  processGroups,\n]);\n"]}